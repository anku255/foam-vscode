// export function deactivate() {}

"use strict";

import * as path from "path";
import * as stringSimilarity from "string-similarity";
import {
  CancellationToken,
  CodeLens,
  CodeLensProvider,
  commands,
  EndOfLine,
  ExtensionContext,
  languages,
  Range,
  TextDocument,
  TextDocumentWillSaveEvent,
  window,
  workspace,
  Position,
} from "vscode";
import {
  isMdEditor,
  mdDocSelector,
  mdHeadingToPlaintext,
  REGEX_FENCED_CODE_BLOCK,
  slugify,
} from "./util/markdown-utils";
import { WorkspaceFiles } from "./util/workspace-files";

/**
 * Workspace config
 */
const docConfig = { tab: "  ", eol: "\r\n" };
const REFERENCE_HEADER = `[//begin]: # "Autogenerated link references for markdown compatibility"`;
const REFERENCE_FOOTER = `[//end]: # "Autogenerated link references"`;

export function activate(context: ExtensionContext) {
  context.subscriptions.push(
    commands.registerCommand(
      "vscode-wikilinks-to-markdown-references.update",
      updateReferenceList
    ),
    workspace.onWillSaveTextDocument(onWillSave),
    languages.registerCodeLensProvider(
      mdDocSelector,
      new WikilinkReferenceCodeLensProvider()
    )
  );
}

async function createReferenceList() {
  let editor = window.activeTextEditor;
  if (!editor || !isMdEditor(editor)) {
    return;
  }

  let refs = await generateReferenceList(editor.document);
  if (refs && refs.length) {
    await editor.edit(function (editBuilder) {
      if (editor) {
        editBuilder.insert(
          new Position(editor.document.lineCount + 1, 0),
          docConfig.eol + refs.join(docConfig.eol)
        );
      }
    });
  }
}

async function updateReferenceList() {
  const editor = window.activeTextEditor;

  if (!editor || !isMdEditor(editor)) {
    return;
  }

  const doc = editor.document;
  const range = detectReferenceListRange(doc);
  if (!range) {
    await createReferenceList();
  } else {
    const refs = await generateReferenceList(doc);
    await editor.edit((editBuilder) => {
      editBuilder.replace(range, refs.join(docConfig.eol));
    });
  }
}

async function generateReferenceList(doc: TextDocument): Promise<string[]> {
  // This might take a while, kick it off now while we do other jobs
  const fileIndexPromise = WorkspaceFiles.getFileIndex();

  loadDocConfig();

  const wikilinks = findWikilinks(doc);
  // console.log("Found links", wikilinks);

  if (!wikilinks || wikilinks.length === 0) {
    return Promise.resolve([]);
  }

  const fileIndex = await fileIndexPromise;
  const references = [];
  // console.log("index", fileIndex);

  for (const link of wikilinks) {
    // link can be with or without extension, files are always indexed without
    const [name] = link.split(".");
    const file = fileIndex[name.toLowerCase()];
    // console.log("name", name);
    // console.log("file", file);
    if (file) {
      references.push(`[${link}]: ${file.name} "${file.title}"`);
    }
  }

  return [REFERENCE_HEADER, ...references, REFERENCE_FOOTER];
}

/**
 * Returns an array of TOC ranges.
 * If no TOC is found, returns an empty array.
 * @param doc a TextDocument
 */
function detectReferenceListRange(doc: TextDocument): Range {
  let tocRanges = [];
  const fullText = doc.getText();

  // find line number of header, and assume 0 for line start
  // if header is not found, this will be last line of the file
  const header = [
    fullText.split(REFERENCE_HEADER)[0].split(docConfig.eol).length - 1,
    0,
  ];

  // find line number and char position where footer ends
  const footer = [
    fullText.split(REFERENCE_FOOTER)[0].split(docConfig.eol).length - 1,
    REFERENCE_FOOTER.length,
  ];

  // if header and footer are on the same line, that means we have no references section
  if (header[0] === footer[0]) {
    return null;
  }

  return new Range(
    new Position(header[0], header[1]),
    new Position(footer[0], footer[1])
  );
}

function commonPrefixLength(s1, s2) {
  let minLength = Math.min(s1.length, s2.length);
  for (let i = 0; i < minLength; i++) {
    if (s1[i] !== s2[i]) {
      return i;
    }
  }
  return minLength;
}

function radioOfCommonPrefix(s1, s2) {
  let minLength = Math.min(s1.length, s2.length);
  let maxLength = Math.max(s1.length, s2.length);

  let prefixLength = commonPrefixLength(s1, s2);
  if (prefixLength < minLength) {
    return prefixLength / minLength;
  } else {
    return minLength / maxLength;
  }
}

function onWillSave(e: TextDocumentWillSaveEvent) {
  // if (!config.updateOnSave) return;

  if (e.document.languageId === "markdown") {
    e.waitUntil(updateReferenceList());
  }
}

function loadDocConfig() {
  // Load workspace config
  let activeEditor = window.activeTextEditor;
  if (!activeEditor) {
    console.log("Failed to load config, no active editor");
    return;
  }

  docConfig.eol = activeEditor.document.eol === EndOfLine.CRLF ? "\r\n" : "\n";

  let tabSize = Number(activeEditor.options.tabSize);
  let insertSpaces = activeEditor.options.insertSpaces;
  if (insertSpaces) {
    docConfig.tab = " ".repeat(tabSize);
  } else {
    docConfig.tab = "\t";
  }
}

function getText(range: Range): string {
  return window.activeTextEditor.document.getText(range);
}

export function findWikilinks(doc: TextDocument) {
  const replacer = (foundStr: string) => foundStr.replace(/[^\r\n]/g, "");
  const markdown = doc
    .getText()
    .replace(REGEX_FENCED_CODE_BLOCK, replacer) //// Remove fenced code blocks (and #603, #675)
    .replace(/<!-- omit in (toc|TOC) -->/g, "&lt; omit in toc &gt;") //// Escape magic comment
    .replace(/<!--[\W\w]+?-->/g, replacer) //// Remove comments
    .replace(/^---[\W\w]+?(\r?\n)---/, replacer); //// Remove YAML front matter

  return WorkspaceFiles.findWikilinksInMarkdown(markdown);
}

class WikilinkReferenceCodeLensProvider implements CodeLensProvider {
  public provideCodeLenses(
    document: TextDocument,
    _: CancellationToken
  ): CodeLens[] | Thenable<CodeLens[]> {
    let range = detectReferenceListRange(document);
    if (!range) {
      return [];
    }

    return generateReferenceList(document).then((refs) => {
      let status =
        getText(range).replace(/\r?\n|\r/g, docConfig.eol) ===
        refs.join(docConfig.eol)
          ? "up to date"
          : "out of date";

      return [
        new CodeLens(range, {
          arguments: [],
          title: `Link references (${status})`,
          command: "",
        }),
      ];
    });
  }
}
